var N=null,E="",T="t",U="u",searchIndex={};
var R=["vec_map","An iterator over the values of a map.","usize","values","Returns an iterator visiting all values in ascending order…","Returns an iterator visiting all key-value pairs in…","option","insert","get_mut","remove","try_from","borrow_mut","try_into","result","type_id","to_owned","clone_into","into_iter","borrow","typeid","next_back","size_hint","ordering","index_mut","VacantEntry","OccupiedEntry","ValuesMut","IntoIter"];

searchIndex[R[0]]={"doc":"A simple map based on a vector for small integer keys.…","i":[[3,"VecMap",R[0],"A map optimized for small integer keys.",N,N],[3,R[24],E,"A vacant Entry.",N,N],[3,R[25],E,"An occupied Entry.",N,N],[3,"Iter",E,"An iterator over the key-value pairs of a map.",N,N],[3,"IterMut",E,"An iterator over the key-value pairs of a map, with the…",N,N],[3,"Keys",E,"An iterator over the keys of a map.",N,N],[3,"Values",E,R[1],N,N],[3,R[26],E,R[1],N,N],[3,R[27],E,"A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain",E,"A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry",E,"A view into a single entry in a map, which may either be…",N,N],[13,"Vacant",E,"A vacant Entry",0,N],[13,"Occupied",E,"An occupied Entry",0,N],[11,"new",E,"Creates an empty `VecMap`.",1,[[],["self"]]],[11,"with_capacity",E,"Creates an empty `VecMap` with space for at least…",1,[[[R[2]]],["self"]]],[11,"capacity",E,"Returns the number of elements the `VecMap` can hold…",1,[[["self"]],[R[2]]]],[11,"reserve_len",E,"Reserves capacity for the given `VecMap` to contain `len`…",1,[[["self"],[R[2]]]]],[11,"reserve_len_exact",E,"Reserves the minimum capacity for the given `VecMap` to…",1,[[["self"],[R[2]]]]],[11,"shrink_to_fit",E,"Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys",E,"Returns an iterator visiting all keys in ascending order…",1,[[["self"]],["keys"]]],[11,R[3],E,R[4],1,[[["self"]],[R[3]]]],[11,"values_mut",E,R[4],1,[[["self"]],["valuesmut"]]],[11,"iter",E,R[5],1,[[["self"]],["iter"]]],[11,"iter_mut",E,R[5],1,[[["self"]],["itermut"]]],[11,"append",E,"Moves all elements from `other` into the map while…",1,[[["self"],["self"]]]],[11,"split_off",E,"Splits the collection into two at the given key.",1,[[["self"],[R[2]]],["self"]]],[11,"drain",E,R[5],1,[[["self"]],["drain"]]],[11,"len",E,"Returns the number of elements in the map.",1,[[["self"]],[R[2]]]],[11,"is_empty",E,"Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear",E,"Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get",E,"Returns a reference to the value corresponding to the key.",1,[[["self"],[R[2]]],[R[6]]]],[11,"contains_key",E,"Returns true if the map contains a value for the specified…",1,[[["self"],[R[2]]],["bool"]]],[11,R[8],E,"Returns a mutable reference to the value corresponding to…",1,[[["self"],[R[2]]],[R[6]]]],[11,R[7],E,"Inserts a key-value pair into the map. If the key already…",1,[[["self"],[R[2]],["v"]],[R[6]]]],[11,R[9],E,"Removes a key from the map, returning the value at the key…",1,[[["self"],[R[2]]],[R[6]]]],[11,"entry",E,"Gets the given key's corresponding entry in the map for…",1,[[["self"],[R[2]]],["entry"]]],[11,"retain",E,"Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"or_insert",E,"Ensures a value is in the entry by inserting the default…",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with",E,"Ensures a value is in the entry by inserting the result of…",0,[[["self"],["f"]],["v"]]],[11,R[7],E,"Sets the value of the entry with the VacantEntry's key,…",2,[[["self"],["v"]],["v"]]],[11,"get",E,"Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,R[8],E,"Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut",E,"Converts the entry into a mutable reference to its value.",3,[[["self"]],["v"]]],[11,R[7],E,"Sets the value of the entry with the OccupiedEntry's key,…",3,[[["self"],["v"]],["v"]]],[11,R[9],E,"Takes the value of the entry out of the map, and returns it.",3,[[["self"]],["v"]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,N],[11,R[17],E,E,1,[[["self"]],["i"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[10],E,E,1,[[[U]],[R[13]]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[R[19]]]],[11,R[11],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[R[13]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[10],E,E,2,[[[U]],[R[13]]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[R[19]]]],[11,R[11],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[R[13]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[10],E,E,3,[[[U]],[R[13]]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[R[19]]]],[11,R[11],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[R[13]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,N],[11,R[17],E,E,4,[[["self"]],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[10],E,E,4,[[[U]],[R[13]]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[R[19]]]],[11,R[11],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[R[13]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[17],E,E,5,[[["self"]],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[10],E,E,5,[[[U]],[R[13]]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[R[19]]]],[11,R[11],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[R[13]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,N],[11,R[17],E,E,6,[[["self"]],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[10],E,E,6,[[[U]],[R[13]]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[R[19]]]],[11,R[11],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[R[13]]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[15],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,N],[11,R[17],E,E,7,[[["self"]],["i"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[10],E,E,7,[[[U]],[R[13]]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[14],E,E,7,[[["self"]],[R[19]]]],[11,R[11],E,E,7,[[["self"]],[T]]],[11,R[12],E,E,7,[[["self"]],[R[13]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[17],E,E,8,[[["self"]],["i"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[10],E,E,8,[[[U]],[R[13]]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[14],E,E,8,[[["self"]],[R[19]]]],[11,R[11],E,E,8,[[["self"]],[T]]],[11,R[12],E,E,8,[[["self"]],[R[13]]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[17],E,E,9,[[["self"]],["i"]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[10],E,E,9,[[[U]],[R[13]]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[14],E,E,9,[[["self"]],[R[19]]]],[11,R[11],E,E,9,[[["self"]],[T]]],[11,R[12],E,E,9,[[["self"]],[R[13]]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[17],E,E,10,[[["self"]],["i"]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[10],E,E,10,[[[U]],[R[13]]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[14],E,E,10,[[["self"]],[R[19]]]],[11,R[11],E,E,10,[[["self"]],[T]]],[11,R[12],E,E,10,[[["self"]],[R[13]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[10],E,E,0,[[[U]],[R[13]]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[R[19]]]],[11,R[11],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[R[13]]]],[11,"extend",E,E,1,[[["self"],["i"]]]],[11,"extend",E,E,1,[[["self"],["i"]]]],[11,"partial_cmp",E,E,1,[[["self"],["self"]],[R[6],[R[22]]]]],[11,R[20],E,E,4,[[["self"]],[R[6]]]],[11,R[20],E,E,5,[[["self"]],[R[6]]]],[11,R[20],E,E,10,[[["self"]],[R[6]]]],[11,R[20],E,E,6,[[["self"]],[R[6],[R[2]]]]],[11,R[20],E,E,7,[[["self"]],[R[6]]]],[11,R[20],E,E,8,[[["self"]],[R[6]]]],[11,R[20],E,E,9,[[["self"]],[R[6]]]],[11,"next",E,E,4,[[["self"]],[R[6]]]],[11,R[21],E,E,4,N],[11,"next",E,E,5,[[["self"]],[R[6]]]],[11,R[21],E,E,5,N],[11,"next",E,E,10,[[["self"]],[R[6]]]],[11,R[21],E,E,10,N],[11,"next",E,E,6,[[["self"]],[R[6],[R[2]]]]],[11,R[21],E,E,6,N],[11,"next",E,E,7,[[["self"]],[R[6]]]],[11,R[21],E,E,7,N],[11,"next",E,E,8,[[["self"]],[R[6]]]],[11,R[21],E,E,8,N],[11,"next",E,E,9,[[["self"]],[R[6]]]],[11,R[21],E,E,9,N],[11,"eq",E,E,1,[[["self"],["self"]],["bool"]]],[11,R[17],E,R[5],1,[[["self"]],["intoiter"]]],[11,"default",E,E,1,[[],["self"]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone_from",E,E,1,[[["self"],["self"]]]],[11,"clone",E,E,4,[[["self"]],["iter"]]],[11,"clone",E,E,6,[[["self"]],["keys"]]],[11,"clone",E,E,7,[[["self"]],[R[3]]]],[11,"cmp",E,E,1,[[["self"],["self"]],[R[22]]]],[11,"fmt",E,E,1,[[["self"],["formatter"]],[R[13]]]],[11,"hash",E,E,1,[[["self"],["h"]]]],[11,"index",E,E,1,[[["self"],[R[2]]],["v"]]],[11,"index",E,E,1,[[["self"],[R[2]]],["v"]]],[11,R[23],E,E,1,[[["self"],[R[2]]],["v"]]],[11,R[23],E,E,1,[[["self"],[R[2]]],["v"]]],[11,"from_iter",E,E,1,[[["i"]],["self"]]]],"p":[[4,"Entry"],[3,"VecMap"],[3,R[24]],[3,R[25]],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,R[26]],[3,R[27]],[3,"Drain"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);